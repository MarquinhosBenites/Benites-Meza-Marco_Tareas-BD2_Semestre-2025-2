-- ============================================================
-- BD2 - Trabajo N°5: Paquetes y Disparadores en Oracle Database
-- Autor del informe: Benites Meza, Marco Fabricio
-- Fecha de script: 14-Oct-2025
-- Archivo único: bd2_trabajo5_oracle.sql
-- ============================================================

PROMPT === [1/4] LIMPIEZA SEGURA DE OBJETOS ===
WHENEVER SQLERROR CONTINUE;
DROP TABLE INASISTENCIAS PURGE;
DROP TABLE ASISTENCIA_EMPLEADO PURGE;
DROP TABLE EMPLEADO_HORARIO PURGE;
DROP TABLE HORARIO PURGE;
DROP TABLE EMPLEADO_CAPACITACION PURGE;
DROP TABLE CAPACITACION PURGE;
WHENEVER SQLERROR EXIT ROLLBACK;

PROMPT === [1/4] CREACIÓN DE TABLAS ADICIONALES ===

CREATE TABLE HORARIO (
  ID_HORARIO        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  DIA_SEMANA        VARCHAR2(10)  NOT NULL,
  TURNO             VARCHAR2(20)  NOT NULL,
  HORA_INICIO       DATE          NOT NULL,
  HORA_TERMINO      DATE          NOT NULL
);

CREATE TABLE EMPLEADO_HORARIO (
  EMPLOYEE_ID       NUMBER        NOT NULL,
  DIA_SEMANA        VARCHAR2(10)  NOT NULL,
  TURNO             VARCHAR2(20)  NOT NULL,
  CONSTRAINT PK_EMPLEADO_HOR PRIMARY KEY (EMPLOYEE_ID, DIA_SEMANA, TURNO),
  CONSTRAINT FK_EH_EMP FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

CREATE TABLE ASISTENCIA_EMPLEADO (
  ID_ASIST          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  EMPLOYEE_ID       NUMBER        NOT NULL,
  DIA_SEMANA        VARCHAR2(10)  NOT NULL,
  FECHA_REAL        DATE          NOT NULL,
  HORA_INICIO_REAL  DATE          NOT NULL,
  HORA_TERMINO_REAL DATE          NOT NULL,
  CONSTRAINT FK_AE_EMP FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

CREATE TABLE INASISTENCIAS (
  ID_INASIS         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  EMPLOYEE_ID       NUMBER NOT NULL,
  FECHA             DATE   NOT NULL,
  MOTIVO            VARCHAR2(200),
  CONSTRAINT FK_IN_EMP FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
);

CREATE TABLE CAPACITACION (
  COD_CAPACITACION  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  NOMBRE            VARCHAR2(100) NOT NULL,
  HORAS             NUMBER(6,2)   NOT NULL,
  DESCRIPCION       VARCHAR2(4000)
);

CREATE TABLE EMPLEADO_CAPACITACION (
  EMPLOYEE_ID       NUMBER NOT NULL,
  COD_CAPACITACION  NUMBER NOT NULL,
  CONSTRAINT PK_EMP_CAP PRIMARY KEY (EMPLOYEE_ID, COD_CAPACITACION),
  CONSTRAINT FK_EC_EMP FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID),
  CONSTRAINT FK_EC_CAP FOREIGN KEY (COD_CAPACITACION) REFERENCES CAPACITACION(COD_CAPACITACION)
);

PROMPT === [1/4] DATOS DE EJEMPLO (10 REGISTROS C/U) ===

INSERT INTO HORARIO (DIA_SEMANA, TURNO, HORA_INICIO, HORA_TERMINO) VALUES ('Lunes','Mañana',   TO_DATE('01-01-2000 08:00','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 12:00','DD-MM-YYYY HH24:MI'));
INSERT INTO HORARIO (DIA_SEMANA, TURNO, HORA_INICIO, HORA_TERMINO) VALUES ('Martes','Mañana',  TO_DATE('01-01-2000 08:00','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 12:00','DD-MM-YYYY HH24:MI'));
INSERT INTO HORARIO (DIA_SEMANA, TURNO, HORA_INICIO, HORA_TERMINO) VALUES ('Miércoles','Mañana',TO_DATE('01-01-2000 08:00','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 12:00','DD-MM-YYYY HH24:MI'));
INSERT INTO HORARIO (DIA_SEMANA, TURNO, HORA_INICIO, HORA_TERMINO) VALUES ('Jueves','Mañana',  TO_DATE('01-01-2000 08:00','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 12:00','DD-MM-YYYY HH24:MI'));
INSERT INTO HORARIO (DIA_SEMANA, TURNO, HORA_INICIO, HORA_TERMINO) VALUES ('Viernes','Mañana', TO_DATE('01-01-2000 08:00','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 12:00','DD-MM-YYYY HH24:MI'));
INSERT INTO HORARIO (DIA_SEMANA, TURNO, HORA_INICIO, HORA_TERMINO) VALUES ('Lunes','Tarde',    TO_DATE('01-01-2000 14:00','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 18:00','DD-MM-YYYY HH24:MI'));
INSERT INTO HORARIO (DIA_SEMANA, TURNO, HORA_INICIO, HORA_TERMINO) VALUES ('Martes','Tarde',   TO_DATE('01-01-2000 14:00','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 18:00','DD-MM-YYYY HH24:MI'));
INSERT INTO HORARIO (DIA_SEMANA, TURNO, HORA_INICIO, HORA_TERMINO) VALUES ('Miércoles','Tarde',TO_DATE('01-01-2000 14:00','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 18:00','DD-MM-YYYY HH24:MI'));
INSERT INTO HORARIO (DIA_SEMANA, TURNO, HORA_INICIO, HORA_TERMINO) VALUES ('Jueves','Tarde',   TO_DATE('01-01-2000 14:00','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 18:00','DD-MM-YYYY HH24:MI'));
INSERT INTO HORARIO (DIA_SEMANA, TURNO, HORA_INICIO, HORA_TERMINO) VALUES ('Viernes','Tarde',  TO_DATE('01-01-2000 14:00','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 18:00','DD-MM-YYYY HH24:MI'));

INSERT INTO EMPLEADO_HORARIO VALUES (100,'Lunes','Mañana');
INSERT INTO EMPLEADO_HORARIO VALUES (100,'Martes','Mañana');
INSERT INTO EMPLEADO_HORARIO VALUES (101,'Lunes','Tarde');
INSERT INTO EMPLEADO_HORARIO VALUES (101,'Martes','Tarde');
INSERT INTO EMPLEADO_HORARIO VALUES (102,'Miércoles','Mañana');
INSERT INTO EMPLEADO_HORARIO VALUES (103,'Jueves','Mañana');
INSERT INTO EMPLEADO_HORARIO VALUES (104,'Viernes','Mañana');
INSERT INTO EMPLEADO_HORARIO VALUES (105,'Miércoles','Tarde');
INSERT INTO EMPLEADO_HORARIO VALUES (106,'Jueves','Tarde');
INSERT INTO EMPLEADO_HORARIO VALUES (107,'Viernes','Tarde');

BEGIN
  FOR i IN 1..10 LOOP
    INSERT INTO CAPACITACION (NOMBRE, HORAS, DESCRIPCION)
    VALUES ('Capacitación '||i, 4 + MOD(i,3), 'Módulo formativo #'||i);
  END LOOP;
END;
/
BEGIN
  INSERT INTO EMPLEADO_CAPACITACION SELECT 100, COD_CAPACITACION FROM CAPACITACION WHERE COD_CAPACITACION <= 5;
  INSERT INTO EMPLEADO_CAPACITACION SELECT 101, COD_CAPACITACION FROM CAPACITACION WHERE COD_CAPACITACION BETWEEN 3 AND 8;
  INSERT INTO EMPLEADO_CAPACITACION SELECT 102, COD_CAPACITACION FROM CAPACITACION WHERE MOD(COD_CAPACITACION,2)=0;
  INSERT INTO EMPLEADO_CAPACITACION SELECT 103, COD_CAPACITACION FROM CAPACITACION WHERE MOD(COD_CAPACITACION,2)=1 AND COD_CAPACITACION<=9;
END;
/
COMMIT;

PROMPT === [2/4] PAQUETE pkg_employee (SPEC) ===
CREATE OR REPLACE PACKAGE pkg_employee AS
  PROCEDURE create_employee(p_employee_id NUMBER, p_first_name VARCHAR2, p_last_name VARCHAR2,
                            p_email VARCHAR2, p_phone VARCHAR2, p_hire_date DATE,
                            p_job_id VARCHAR2, p_salary NUMBER, p_commission_pct NUMBER,
                            p_manager_id NUMBER, p_department_id NUMBER);
  PROCEDURE update_employee(p_employee_id NUMBER, p_job_id VARCHAR2, p_salary NUMBER);
  PROCEDURE delete_employee(p_employee_id NUMBER);
  PROCEDURE read_employee(p_employee_id NUMBER);
  PROCEDURE top_job_changers;
  FUNCTION avg_hires_per_month RETURN NUMBER;
  PROCEDURE regional_salary_stats;
  FUNCTION total_vacation_cost RETURN NUMBER;
  FUNCTION horas_laboradas(p_employee_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER;
  FUNCTION horas_faltadas(p_employee_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER;
  PROCEDURE planilla_mes(p_mes NUMBER, p_anio NUMBER);
  FUNCTION horas_capacitacion(p_employee_id NUMBER) RETURN NUMBER;
  PROCEDURE listar_capacitaciones;
END pkg_employee;
/
SHOW ERRORS;

PROMPT === [2/4] PAQUETE pkg_employee (BODY) ===
CREATE OR REPLACE PACKAGE BODY pkg_employee AS
  PROCEDURE create_employee(p_employee_id NUMBER, p_first_name VARCHAR2, p_last_name VARCHAR2,
                            p_email VARCHAR2, p_phone VARCHAR2, p_hire_date DATE,
                            p_job_id VARCHAR2, p_salary NUMBER, p_commission_pct NUMBER,
                            p_manager_id NUMBER, p_department_id NUMBER) IS
  BEGIN
    INSERT INTO employees(employee_id, first_name, last_name, email, phone_number, hire_date,
                          job_id, salary, commission_pct, manager_id, department_id)
    VALUES(p_employee_id, p_first_name, p_last_name, p_email, p_phone, p_hire_date,
           p_job_id, p_salary, p_commission_pct, p_manager_id, p_department_id);
  END;

  PROCEDURE update_employee(p_employee_id NUMBER, p_job_id VARCHAR2, p_salary NUMBER) IS
  BEGIN
    UPDATE employees SET job_id = p_job_id, salary = p_salary WHERE employee_id = p_employee_id;
  END;

  PROCEDURE delete_employee(p_employee_id NUMBER) IS
  BEGIN
    DELETE FROM employees WHERE employee_id = p_employee_id;
  END;

  PROCEDURE read_employee(p_employee_id NUMBER) IS
    v_first employees.first_name%TYPE; v_last employees.last_name%TYPE;
    v_job employees.job_id%TYPE; v_sal employees.salary%TYPE;
  BEGIN
    SELECT first_name, last_name, job_id, salary INTO v_first, v_last, v_job, v_sal
      FROM employees WHERE employee_id = p_employee_id;
    DBMS_OUTPUT.PUT_LINE('Empleado '||p_employee_id||': '||v_first||' '||v_last||' - '||v_job||' - Salario: '||v_sal);
  EXCEPTION WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('Empleado no encontrado: '||p_employee_id);
  END;

  PROCEDURE top_job_changers IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Top 4 empleados con mayor rotación de puesto:');
    FOR r IN (
      SELECT e.employee_id, e.last_name, e.first_name, e.job_id AS job_actual,
             j.job_title AS nombre_puesto, COUNT(*) AS cambios
        FROM job_history h JOIN employees e ON e.employee_id = h.employee_id
        JOIN jobs j ON j.job_id = e.job_id
       GROUP BY e.employee_id, e.last_name, e.first_name, e.job_id, j.job_title
       ORDER BY cambios DESC, e.employee_id FETCH FIRST 4 ROWS ONLY
    ) LOOP
      DBMS_OUTPUT.PUT_LINE(r.employee_id||' | '||r.last_name||', '||r.first_name||' | '||r.job_actual||' - '||r.nombre_puesto||' | cambios='||r.cambios);
    END LOOP;
  END;

  FUNCTION avg_hires_per_month RETURN NUMBER IS v_total NUMBER := 0; BEGIN
    DBMS_OUTPUT.PUT_LINE('Mes | Promedio de contrataciones');
    FOR r IN (
      SELECT TO_CHAR(hire_date,'MM') AS mes_num,
             TO_CHAR(hire_date,'Month','NLS_DATE_LANGUAGE=SPANISH') AS mes_nombre,
             ROUND( COUNT(*) / COUNT(DISTINCT TO_CHAR(hire_date,'YYYY')), 2 ) AS promedio
        FROM employees
       GROUP BY TO_CHAR(hire_date,'MM'), TO_CHAR(hire_date,'Month','NLS_DATE_LANGUAGE=SPANISH')
       ORDER BY mes_num
    ) LOOP v_total := v_total + 1;
      DBMS_OUTPUT.PUT_LINE(TRIM(r.mes_nombre)||' | '||r.promedio);
    END LOOP; RETURN v_total; END;

  PROCEDURE regional_salary_stats IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Región | Suma Salarios | #Empleados | Fecha ingreso más antigua');
    FOR r IN (
      SELECT reg.region_name AS region, SUM(e.salary) AS suma_sal, COUNT(e.employee_id) AS cnt_emp, MIN(e.hire_date) AS mas_antiguo
        FROM employees e JOIN departments d ON d.department_id = e.department_id
        JOIN locations l ON l.location_id = d.location_id
        JOIN countries c ON c.country_id = l.country_id
        JOIN regions reg ON reg.region_id = c.region_id
       GROUP BY reg.region_name ORDER BY reg.region_name
    ) LOOP
      DBMS_OUTPUT.PUT_LINE(r.region||' | '||r.suma_sal||' | '||r.cnt_emp||' | '||TO_CHAR(r.mas_antiguo,'YYYY-MM-DD'));
    END LOOP;
  END;

  FUNCTION total_vacation_cost RETURN NUMBER IS v_cost_total NUMBER := 0; BEGIN
    DBMS_OUTPUT.PUT_LINE('Empleado | Meses servicio | Meses de vacaciones | Costo estimado');
    FOR r IN (
      SELECT e.employee_id, e.first_name||' '||e.last_name AS nombre, e.salary,
             FLOOR(MONTHS_BETWEEN(TRUNC(SYSDATE), TRUNC(e.hire_date))/12) AS anios,
             FLOOR(MONTHS_BETWEEN(TRUNC(SYSDATE), TRUNC(e.hire_date))) AS meses_total
        FROM employees e
    ) LOOP DECLARE v_vac_meses NUMBER := r.anios; v_costo NUMBER := v_vac_meses * r.salary;
      BEGIN v_cost_total := v_cost_total + v_costo;
        DBMS_OUTPUT.PUT_LINE(r.nombre||' | '||r.meses_total||' | '||v_vac_meses||' | '||v_costo);
      END;
    END LOOP; RETURN v_cost_total; END;

  FUNCTION horas_laboradas(p_employee_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER IS v_horas NUMBER := 0; BEGIN
    SELECT NVL(SUM( (HORA_TERMINO_REAL - HORA_INICIO_REAL) * 24 ), 0) INTO v_horas
      FROM ASISTENCIA_EMPLEADO
     WHERE EMPLOYEE_ID = p_employee_id
       AND EXTRACT(MONTH FROM FECHA_REAL) = p_mes
       AND EXTRACT(YEAR  FROM FECHA_REAL) = p_anio;
    RETURN v_horas; END;

  FUNCTION horas_faltadas(p_employee_id NUMBER, p_mes NUMBER, p_anio NUMBER) RETURN NUMBER IS
    v_prog NUMBER := 0; v_lab NUMBER := 0;
  BEGIN
    FOR r IN (
      SELECT eh.DIA_SEMANA, eh.TURNO, h.HORA_INICIO, h.HORA_TERMINO
        FROM EMPLEADO_HORARIO eh JOIN HORARIO h ON h.DIA_SEMANA = eh.DIA_SEMANA AND h.TURNO = eh.TURNO
       WHERE eh.EMPLOYEE_ID = p_employee_id
    ) LOOP
      FOR d IN (
        SELECT TRUNC(ADD_MONTHS(TRUNC(DATE '2000-01-01'), (p_anio-2000)*12 + (p_mes-1)) + (level-1)) AS dia
          FROM dual CONNECT BY level <= TO_NUMBER(TO_CHAR(LAST_DAY(TRUNC(TO_DATE(p_anio||'-'||p_mes||'-01','YYYY-MM-DD'))),'DD'))
      ) LOOP
        IF TO_CHAR(d.dia,'DAY','NLS_DATE_LANGUAGE=SPANISH') LIKE UPPER(r.DIA_SEMANA)||'%' THEN
          v_prog := v_prog + ( (r.HORA_TERMINO - r.HORA_INICIO) * 24 );
        END IF;
      END LOOP;
    END LOOP;
    v_lab := horas_laboradas(p_employee_id, p_mes, p_anio);
    RETURN GREATEST(v_prog - v_lab, 0);
  END;

  PROCEDURE planilla_mes(p_mes NUMBER, p_anio NUMBER) IS
    v_prog NUMBER; v_lab NUMBER; v_rate NUMBER; v_sal NUMBER;
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Empleado | Salario base | Horas prog | Horas lab | Horas falta | Salario calculado');
    FOR e IN (SELECT employee_id, first_name, last_name, salary FROM employees) LOOP
      v_prog := horas_faltadas(e.employee_id, p_mes, p_anio) + horas_laboradas(e.employee_id, p_mes, p_anio);
      v_lab  := horas_laboradas(e.employee_id, p_mes, p_anio);
      IF v_prog = 0 THEN v_rate := e.salary / 160; ELSE v_rate := e.salary / v_prog; END IF;
      v_sal := v_rate * v_lab;
      DBMS_OUTPUT.PUT_LINE(e.first_name||' '||e.last_name||' | '||e.salary||' | '||ROUND(v_prog,2)||' | '||ROUND(v_lab,2)||' | '||ROUND(GREATEST(v_prog - v_lab,0),2)||' | '||ROUND(v_sal,2));
    END LOOP;
  END;

  FUNCTION horas_capacitacion(p_employee_id NUMBER) RETURN NUMBER IS v_total NUMBER := 0; BEGIN
    SELECT NVL(SUM(c.horas),0) INTO v_total
      FROM empleado_capacitacion ec JOIN capacitacion c ON c.cod_capacitacion = ec.cod_capacitacion
     WHERE ec.employee_id = p_employee_id; RETURN v_total; END;

  PROCEDURE listar_capacitaciones IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Empleado | Total horas capacitación');
    FOR e IN (SELECT employee_id, first_name, last_name FROM employees) LOOP
      DBMS_OUTPUT.PUT_LINE(e.first_name||' '||e.last_name||' | '||horas_capacitacion(e.employee_id));
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('Detalle de capacitaciones:');
    FOR r IN (
      SELECT c.nombre, e.first_name||' '||e.last_name AS empleado, c.horas
        FROM empleado_capacitacion ec
        JOIN capacitacion c ON c.cod_capacitacion = ec.cod_capacitacion
        JOIN employees e ON e.employee_id = ec.employee_id
       ORDER BY c.nombre, empleado
    ) LOOP
      DBMS_OUTPUT.PUT_LINE(r.nombre||' | '||r.empleado||' | '||r.horas);
    END LOOP;
  END;
END pkg_employee;
/
SHOW ERRORS;

PROMPT === [3/4] TRIGGERS ===
CREATE OR REPLACE TRIGGER trg_valida_asistencia
BEFORE INSERT ON ASISTENCIA_EMPLEADO
FOR EACH ROW
DECLARE v_inicio DATE; v_fin DATE;
BEGIN
  IF UPPER(TO_CHAR(:NEW.FECHA_REAL,'DAY','NLS_DATE_LANGUAGE=SPANISH')) NOT LIKE UPPER(:NEW.DIA_SEMANA)||'%' THEN
    RAISE_APPLICATION_ERROR(-20001, 'El día de la semana no corresponde a la fecha.');
  END IF;
  SELECT h.HORA_INICIO, h.HORA_TERMINO INTO v_inicio, v_fin
    FROM EMPLEADO_HORARIO eh JOIN HORARIO h ON h.DIA_SEMANA = eh.DIA_SEMANA AND h.TURNO = eh.TURNO
   WHERE eh.EMPLOYEE_ID = :NEW.EMPLOYEE_ID AND UPPER(eh.DIA_SEMANA) = UPPER(:NEW.DIA_SEMANA)
   FETCH FIRST 1 ROWS ONLY;
  IF TO_CHAR(:NEW.HORA_INICIO_REAL,'HH24:MI') <> TO_CHAR(v_inicio,'HH24:MI') THEN
    RAISE_APPLICATION_ERROR(-20002, 'La hora de inicio no corresponde al horario programado.');
  END IF;
  IF TO_CHAR(:NEW.HORA_TERMINO_REAL,'HH24:MI') <> TO_CHAR(v_fin,'HH24:MI') THEN
    RAISE_APPLICATION_ERROR(-20003, 'La hora de término no corresponde al horario programado.');
  END IF;
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER trg_valida_salario
BEFORE INSERT OR UPDATE OF salary, job_id ON employees
FOR EACH ROW
DECLARE v_min jobs.min_salary%TYPE; v_max jobs.max_salary%TYPE;
BEGIN
  SELECT min_salary, max_salary INTO v_min, v_max FROM jobs WHERE job_id = :NEW.job_id;
  IF :NEW.salary < v_min OR :NEW.salary > v_max THEN
    RAISE_APPLICATION_ERROR(-20010, 'Salario fuera del rango permitido para el puesto.');
  END IF;
END;
/
SHOW ERRORS;

CREATE OR REPLACE TRIGGER trg_restringe_ingreso
BEFORE INSERT ON ASISTENCIA_EMPLEADO
FOR EACH ROW
DECLARE v_inicio DATE; v_fin DATE; v_ok BOOLEAN := FALSE;
BEGIN
  SELECT h.HORA_INICIO, h.HORA_TERMINO INTO v_inicio, v_fin
    FROM EMPLEADO_HORARIO eh JOIN HORARIO h ON h.DIA_SEMANA = eh.DIA_SEMANA AND h.TURNO = eh.TURNO
   WHERE eh.EMPLOYEE_ID = :NEW.EMPLOYEE_ID AND UPPER(eh.DIA_SEMANA) = UPPER(:NEW.DIA_SEMANA)
   FETCH FIRST 1 ROWS ONLY;
  IF :NEW.HORA_INICIO_REAL BETWEEN (v_inicio - (30/1440)) AND (v_inicio + (30/1440)) THEN v_ok := TRUE; END IF;
  IF NOT v_ok THEN INSERT INTO INASISTENCIAS(EMPLOYEE_ID, FECHA, MOTIVO)
    VALUES(:NEW.EMPLOYEE_ID, :NEW.FECHA_REAL, 'Ingreso fuera de ventana +/-30 min'); END IF;
END;
/
SHOW ERRORS;

PROMPT === [4/4] EJEMPLOS DE EJECUCIÓN ===
SET SERVEROUTPUT ON
EXEC pkg_employee.top_job_changers;
DECLARE v_cnt NUMBER; BEGIN v_cnt := pkg_employee.avg_hires_per_month; DBMS_OUTPUT.PUT_LINE('Total meses reportados = '||v_cnt); END; /
EXEC pkg_employee.regional_salary_stats;
DECLARE v_cost NUMBER; BEGIN v_cost := pkg_employee.total_vacation_cost; DBMS_OUTPUT.PUT_LINE('Costo total estimado = '||v_cost); END; /
DECLARE v_h NUMBER; BEGIN v_h := pkg_employee.horas_capacitacion(100); DBMS_OUTPUT.PUT_LINE('Horas capacitación EID=100: '||v_h); END; /
EXEC pkg_employee.listar_capacitaciones;
EXEC pkg_employee.planilla_mes(9, 2025);

INSERT INTO ASISTENCIA_EMPLEADO(EMPLOYEE_ID, DIA_SEMANA, FECHA_REAL, HORA_INICIO_REAL, HORA_TERMINO_REAL)
VALUES(100,'Lunes', DATE '2025-09-01', TO_DATE('01-01-2000 08:00','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 12:00','DD-MM-YYYY HH24:MI'));
COMMIT;

INSERT INTO ASISTENCIA_EMPLEADO(EMPLOYEE_ID, DIA_SEMANA, FECHA_REAL, HORA_INICIO_REAL, HORA_TERMINO_REAL)
VALUES(100,'Lunes', DATE '2025-09-08', TO_DATE('01-01-2000 06:50','DD-MM-YYYY HH24:MI'), TO_DATE('01-01-2000 12:00','DD-MM-YYYY HH24:MI'));
COMMIT;

SELECT * FROM INASISTENCIAS WHERE EMPLOYEE_ID=100 ORDER BY FECHA;

-- FIN